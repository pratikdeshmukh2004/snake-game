{"version":3,"sources":["Audios/zapsplat_human_eat_bite_apple_004_15223.mp3","Audios/game-over-sound-effect.mp3","Snake.js","Food.js","App.js","serviceWorker.js","index.js","Audios/Tick-DeepFrozenApps-397275646.mp3"],"names":["module","exports","props","snakeDots","map","dot","i","style","left","top","className","key","getRandomCoordinates","Math","floor","random","audio","Audio","Tick","audio2","Eat","over","Over","initialState","food","speed","direction","App","state","onKeyDown","e","window","event","keyCode","setState","pause","play","moveSnake","length","dots","head","push","shift","this","swal","title","button","then","setInterval","document","onkeydown","checkIfOutOfBorders","checkIfEat","onGameOver","snake","pop","forEach","enlargeSanke","increaseSpeed","newSnake","unshift","buttons","b","icon","close","textAlign","float","Snake","Food","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c5fdaa75.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/zapsplat_human_eat_bite_apple_004_15223.cd6b4dbb.mp3\";","module.exports = __webpack_public_path__ + \"static/media/game-over-sound-effect.49d382a5.mp3\";","import React from 'react'\n\nexport default (props) => {\n    return (\n        <div>\n            {props.snakeDots.map((dot, i) => {\n                const style = {\n                    left: `${dot[0]}%`,\n                    top: `${dot[1]}%`\n                } \n                return (\n                    <div className=\"snake-dot\" key={i} style={style}></div>\n                )\n            })}\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default (props) => {\n\n    const style ={\n        left: `${props.dot[0]}%`,\n        top: `${props.dot[1]}%`\n    }\n    return (\n        <div className=\"snake-food\" style={style}>\n            \n        </div>\n    )\n}\n","import React, { Component } from \"react\";\nimport Tick from \"./Audios/Tick-DeepFrozenApps-397275646.mp3\"\nimport Eat from \"./Audios/zapsplat_human_eat_bite_apple_004_15223.mp3\"\nimport Over from \"./Audios/game-over-sound-effect.mp3\"\nimport Snake from \"./Snake\";\nimport Food from \"./Food\";\nimport swal from \"sweetalert\";\n\nconst getRandomCoordinates = () => {\n  let min = 1;\n  let max = 98;\n  let x = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  let y = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  return [x, y];\n};\nvar audio = new Audio(Tick)\nvar audio2 = new Audio(Eat)\nvar over = new Audio(Over)\n\nconst initialState = {\n  food: getRandomCoordinates(),\n  speed: 200,\n  direction: \"RIGHT\",\n  snakeDots: [\n    [0, 0],\n    [2, 0],\n  ],\n};\n\nexport class App extends Component {\n  state = initialState;\n\n  componentDidMount() {\n    this.setState({ snakeDots: [] });\n    swal({\n      title: \"Press Start Button To Start The Game.\",\n      button: \"Start\",\n    }).then(() => {\n      this.setState(initialState);\n    });\n    setInterval(this.moveSnake, this.state.speed);\n    document.onkeydown = this.onKeyDown;\n  }\n\n  componentDidUpdate() {\n    if (this.state.snakeDots.length > 0) {\n      this.checkIfOutOfBorders();\n    //   this.checkIfCollapsed();\n      this.checkIfEat();\n    }\n  }\n  onKeyDown = (e) => {\n   \n    e = e || window.event;\n    switch (e.keyCode) {\n      case 38:\n        this.setState({ direction: \"UP\" });\n        audio.pause()\n        audio.play()\n        break;\n      case 40:\n        this.setState({ direction: \"DOWN\" });\n        audio.pause()\n        audio.play()\n        break;\n      case 37:\n        this.setState({ direction: \"LEFT\" });\n        audio.pause()\n        audio.play()\n        break;\n      case 39:\n        this.setState({ direction: \"RIGHT\" });\n        audio.pause()\n        audio.play()\n        break;\n    }\n  };\n\n  moveSnake = () => {\n    if (this.state.snakeDots.length > 0) {\n      let dots = [...this.state.snakeDots];\n      let head = dots[dots.length - 1];\n      switch (this.state.direction) {\n        case \"RIGHT\":\n          head = [head[0] + 2, head[1]];\n          break;\n        case \"LEFT\":\n          head = [head[0] - 2, head[1]];\n          break;\n        case \"DOWN\":\n          head = [head[0], head[1] + 2];\n          break;\n        case \"UP\":\n          head = [head[0], head[1] - 2];\n          break;\n      }\n\n      dots.push(head);\n      dots.shift();\n      this.setState({\n        snakeDots: dots,\n      });\n    }\n  };\n\n  checkIfOutOfBorders() {\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n    if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\n      this.onGameOver();\n    }\n  }\n\n  checkIfCollapsed() {\n    let snake = [...this.state.snakeDots];\n    let head = snake[snake.length - 1];\n    snake.pop();\n    snake.forEach((dot) => {\n      if (head[0] == dot[0] && head[1] == dot[1]) {\n        this.onGameOver();\n      }\n    });\n  }\n\n  checkIfEat() {\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n    let food = this.state.food;\n    if (head[0] == food[0] && head[1] == food[1]) {\n      audio2.play()\n      this.setState({\n        food: getRandomCoordinates(),\n      });\n      this.enlargeSanke();\n      this.increaseSpeed();\n    }\n  }\n\n  enlargeSanke() {\n    let newSnake = [...this.state.snakeDots];\n    newSnake.unshift([]);\n    this.setState({\n      snakeDots: newSnake,\n    });\n  }\n\n  increaseSpeed() {\n    if (this.state.speed > 10) {\n      this.setState({\n        speed: this.state.speed - 100               ,\n      });\n    }\n  }\n\n  onGameOver() {\n    over.play()\n    this.setState({\n      snakeDots: [],\n    });\n    swal(\n      `Game Over. Snake Length Is ${this.state.snakeDots.length}.`,\n      \"\",\n      \"warning\",\n      { buttons: [\"Close\", \"Start\"] }\n    ).then((b) => {\n      if (b) {\n        swal({\n          title: \"Welcome Back TO Snake Game.\",\n          icon: \"success\",\n          button: \"Start\",\n        }).then(() => {\n          this.setState(initialState);\n        });\n      }else{\n          window.close()\n      }\n    });\n  }\n  render() {\n    return (\n      <div>\n        <h1 style={{ textAlign: \"center\" }}>Snake Game</h1>\n        <div className=\"score-board\">\n            <h3>Live Score<b style={{float: \"right\"}}>Length : {this.state.snakeDots.length}</b></h3>\n        </div>\n        <div className=\"game-area\">\n          <Snake snakeDots={this.state.snakeDots} />\n          <Food dot={this.state.food} />\n          \n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/Tick-DeepFrozenApps-397275646.b685cef5.mp3\";"],"sourceRoot":""}